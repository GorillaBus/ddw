{"version":3,"sources":["webpack://ddw/webpack/universalModuleDefinition","webpack://ddw/webpack/bootstrap","webpack://ddw/./src/class/Vector.js","webpack://ddw/./src/class/Utils.js","webpack://ddw/./src/class/Model.js","webpack://ddw/./src/class/Geometry.js","webpack://ddw/./src/class/Physics.js","webpack://ddw/./src/class/Body.js","webpack://ddw/./src/class/SpatialPartitioner.js","webpack://ddw/./src/class/GlobalInteraction.js","webpack://ddw/./src/class/SpatialInteraction.js","webpack://ddw/./index.js","webpack://ddw/./src/class/PolygonGenerator.js","webpack://ddw/./src/class/ModelDrawer.js","webpack://ddw/./src/class/Scene.js","webpack://ddw/./src/class/ScenePlayer.js","webpack://ddw/./src/class/Viewport.js","webpack://ddw/./src/class/Collision.js","webpack://ddw/./src/class/Gravity.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector","settings","x","y","length","angle","setLength","setAngle","magnitude","getLength","Math","cos","sin","atan2","getY","getX","getAngle","sqrt","vector","substract","cross","fromTarget","normalize","ddw","v","dot","factor","rx","copy","multiplyBy","v1","v2","theta","acos","isNaN","console","warn","crossProduct","angleBetween","angleDirection","divideBy","max","instance","s4","floor","random","toString","substring","min","low1","high1","low2","high2","randomRange","PI","hex","g","b","componentToHex","result","exec","parseInt","replace","points","strokeColor","fillColor","fillGradient","filter","bounds","getBounds","center","getCenter","width","xMax","xMin","height","yMax","yMin","radius","children","xs","ys","len","point","push","apply","transformed","j","rotatePoint","scalePoint","translatePoint","constructor","map","transform","transformInversion","scale","position","r1","r2","rangeIntersect","distX","abs","distY","dx","dy","c1","c2","xDist","yDist","distSquared","dist_squared","min0","max0","min1","max1","G","source","target","dir","location","distance","getRadius","force","mass","applyForce","intersection","xVelocity","velocity","yVelocity","dotProduct","collisionScale","collision","totalDensity","density","combinedMass","collisionWeight1","collisionWeight2","collisionResult1","collisionResult2","multiply","applyNetForce","body","speed","distanceTo","Utils","heading","angleAcceleration","angleVelocity","acceleration","uuid","uniqueID","model","world","getWorldTransform","addTo","f","divide","cellSize","neighborRange","cells","cellIndex","debug","cellId","cell","neighborCells","neighborIds","getNeighborCellIds","id","neighbor","getCell","join","cellData","bodies","pointPosition","addCell","xComponent","yComponent","cb","bodyA","bodyB","SpatialPartitioner","localResolver","neighborResolver","currentCell","getNeighborCells","currentBody","k","localBody","currentNeighborCell","PolygonGenerator","Model","ModelDrawer","Scene","ScenePlayer","Body","Viewport","GlobalInteraction","SpatialInteraction","Collision","Gravity","Physics","Geometry","divs","angleFraction","ctx","getPoints","save","beginPath","a","moveTo","lineTo","closePath","strokeStyle","stroke","fillStyle","fill","createRadialGradient","restore","drawModel","strokeRect","arc","lightSource","shadowScale","shadowDisplacement","shadowSpread","shadowModelRadius","shadowVector","region","Path2D","clip","gradient","addColorStop","stop1","stop2","viewport","drawer","spatialInteractions","globalInteractions","playerFps","init","boundries","translate","run","clearRect","update","runSpatialInteractions","runGlobalInteractions","debugDraw","draw","resetSpatialInteractions","spatialRegister","lightSourceViewModel","getRelativeView","intersects","bodyViewModel","drawShadow","drawInnerShadow","printText","forEach","spi","drawSpatialGrid","resetGrid","registerBody","getCells","cellModel","neighborhoodModel","getScale","text","font","fillText","scene","fps","playing","requestId","then","startTime","fpsInterval","frameCount","framerate","forward","reset","newtime","window","requestAnimationFrame","elapsed","sinceStart","round","cancelAnimationFrame","performance","now","super","geometry","attached","attachTo","transitions","runTransitions","main","rectangleRectangleIntersection","child","itc","detach","steps","add","translateStep","scaleStep","end","splice","zoom","addTransition","setX","setY","physics","intersector","resolver","resolve","circleCircleIntersection","elasticCollision","gravitate","gravity"],"mappings":"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","file":"ddw.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ddw\"] = factory();\n\telse\n\t\troot[\"ddw\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","class Vector {\n\n  /**\n  * A 2D vector class that provides a wide range of vector operations.\n  * @summary View file: {@link https://github.com/GorillaBus/ddw/blob/master/src/class/BodyManager.js https://github.com/GorillaBus/ddw/blob/master/src/class/Shape.js}.\n  * @constructor\n  * @param {Object} settings - Json object with construction options.\n  * @param {Float} [settings.x=0] - Initial X vector component.\n  * @param {Float} [settings.y=0] - Initial Y vector component.\n  * @param {Float} [settings.length=0] - Initial vector magnitude or length.\n  * @param {Float} [settings.angle=0] - Initial vector angle in radians.\n  */\n  constructor(settings) {\n    settings = settings || {};\n    settings.x = settings.x || 0;\n    settings.y = settings.y || 0;\n    settings.length = settings.length || 0;\n    settings.angle = settings.angle || 0;\n    this.x = settings.x;\n    this.y = settings.y;\n    if (settings.length) {\n      this.setLength(settings.length);\n    }\n    if (settings.angle) {\n      this.setAngle(settings.angle);\n    }\n  }\n\n  /**\n  * Sets the X component of the vector.\n  * @method\n  * @param {Float} magnitude - Vector magnitude over the X axis.\n  */\n  setX(magnitude) {\n    this.x = magnitude;\n  }\n\n  /**\n  * Gets the X component of the vector.\n  * @method\n  * @returns {Float} Vector magnitude over the X axis.\n  */\n  getX() {\n    return this.x;\n  }\n\n  /**\n  * Sets the Y component of the vector.\n  * @method\n  * @param {Float} magnitude - Vector magnitude over the Y axis.\n  */\n  setY(magnitude) {\n    this.y = magnitude;\n  }\n\n  /**\n  * Gets the Y component of the vector.\n  * @method\n  * @returns {Float} Vector magnitude over the Y axis.\n  */\n  getY() {\n    return this.y;\n  }\n\n  /**\n  * Sets the vector angle.\n  * @method\n  * @param {Float} angle - Angle in radians.\n  */\n  setAngle(angle) {\n    let length = this.getLength();\n    this.x = Math.cos(angle) * length;\n    this.y = Math.sin(angle) * length;\n  }\n\n  /**\n  * Gets the current vector's angle.\n  * @method\n  * @returns {Float} The vector's angle in radians.\n  */\n  getAngle() {\n    return Math.atan2(this.getY(), this.getX());\n  }\n\n  /**\n  * Sets the magnitude of the vector on it's current direction.\n  * @method\n  * @param {Float} length - The desired length for the vector.\n  */\n  setLength(length) {\n    let angle = this.getAngle();\n    this.x = Math.cos(angle) * length;\n    this.y = Math.sin(angle) * length;\n  }\n\n  /**\n  * Gets the current length of the vector.\n  * @method\n  * @returns {Float} The current vector's length.\n  */\n  getLength() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  /**\n  * Tells if the vector has a length different than 0.\n  * @method\n  * @returns {Boolean} True when the vector's length is different than 0, false either.\n  */\n  hasLength() {\n    return this.x !== 0 || this.y !== 0;\n  }\n\n  /**\n  * Rotates the vector by a given angle in radians.\n  * @method\n  * @param {Float} angle - The rotation angle in radians.\n  */\n  rotateBy(angle) {\n    const x = this.getX();\n    const y = this.getY();\n    this.x = x * Math.cos(angle) - y * Math.sin(angle);\n    this.y = x * Math.sin(angle) + y * Math.cos(angle);\n  }\n\n  /**\n  * Adds a given vector to the current vector, returning a new instance.\n  * @method\n  * @param {Vector} vector - A vector object.\n  * @returns {Vector} The resulting vector object.\n  */\n  add(vector) {\n    return new Vector({ x: this.x + vector.getX(), y: this.y + vector.getY() });\n  }\n\n  /**\n  * Substracts a vector to the current vector, returning a new instance.\n  * @method\n  * @param {Vector} vector - A vector object.\n  * @returns {Vector} The resulting vector object.\n  */\n  substract(vector) {\n    return new Vector({ x: this.x - vector.getX(), y: this.y - vector.getY() });\n  }\n\n  /**\n  * Muliplies the current vector by a given vector\n  * @method\n  * @param {Vector} vector - A vector object.\n  * @returns {Vector} The resulting vector object.\n  */\n  multiply(value) {\n    return new Vector({ x: this.x * value, y: this.y * value });\n  }\n\n  /**\n  * Divides the current vector by a given vector.\n  * @method\n  * @param {Vector} vector - A vector object.\n  * @returns {Vector} The resulting vector object.\n  */\n  divide(value) {\n    return new Vector({ x: this.x / value, y: this.y / value });\n  }\n\n  /**\n  * Adds a given vector to the current vector instance.\n  * @method\n  * @param {Vector} vector - A vector object.\n  */\n  addTo(vector) {\n    this.x += vector.getX();\n    this.y += vector.getY();\n  }\n\n  /**\n  * Substracts a given vector from the current vector instance.\n  * @method\n  * @param {Vector} vector - A vector object.\n  */\n  substractFrom(vector) {\n    this.x -= vector.getX();\n    this.y -= vector.getY();\n  }\n\n  /**\n  * Multiplies the current vector instance by a given vector.\n  * @method\n  * @param {Vector} vector - A vector object.\n  */\n  multiplyBy(value) {\n    this.x *= value;\n    this.y *= value;\n  }\n\n  /**\n  * Divides the current vector instance by a given vector.\n  * @method\n  * @param {Vector} vector - A vector object.\n  */\n  divideBy(value) {\n    this.x /= value;\n    this.y /= value;\n  }\n\n  /**\n  * Computes the dot product between the current instance and a given vector. Sometimes used to determine the relative position between the two vectors:<br/>&nbsp;&nbsp;<0 means B is behind<br/> &nbsp;&nbsp;=0 means B is in front<br/> &nbsp;&nbsp;>0 means B is at left/rights used to find the position of vector A with respect to vector B:<br/>\n  * @method\n  * @param {Vector} vector - A vector object.\n  * @returns {Float} The dot product between the two vectors.\n  */\n  dot(vector) {\n    return this.x * vector.x + this.y * vector.y;\n  }\n\n  /**\n  * Computes the cross product between the current instance and a given vector.\n  * @method\n  * @param {Vector} vector - A vector object.\n  * @returns {Float} The cross product between the two vectors.\n  */\n  cross(vector) {\n    return (this.x * vector.y) - (this.y * vector.x);\n  }\n\n  /**\n  * Computes the perpendicular dot product (or outer product) between two vectors to find the intersection point between the two given vectors.\n  * @method\n  * @param {Vector} vector - A vector object.\n  * @returns {Vector} A vector object representing the intersection point between the two vectors.\n  */\n  perpDot(vector) {\n    const v3 = this.substract(vector);\n    const t = v3.cross(vector) / this.cross(vector);\n    return new Vector({\n      x: this.getX() + vector.getX() * t,\n      y: this.getY() + vector.getY() * t\n    });\n  }\n\n  /**\n  * Computes the perpendicular vector from the defined from the current Vector instance to the given Vector.\n  * @method\n  * @param {Vector} vector - A vector object.\n  * @returns {Array} A an array of Vector objects (left and right)\n  */\n  perpTo(vector) {\n    const fromTarget = this.substract(vector);\n    fromTarget.normalize();\n    const perpLeft = new ddw.Vector({\n      x: fromTarget.getY(),\n      y: -fromTarget.getX(),\n      length: 1\n    });\n    const perpRight = new ddw.Vector({\n      x: -fromTarget.getY(),\n      y: fromTarget.getX(),\n      length: 1\n    });\n    return [ perpLeft, perpRight ];\n  }\n\n  /**\n  * Computes the vector projection of the current instance along the given vector.\n  * @method\n  * @param {Vector} vector - A vector object.\n  * @returns {Vector} A new vector instance representing the computed projection.\n  */\n  project(v) {\n    const d = vector.dot(vector);\n    if (d > 0) {\n      const dp = this.dot(vector);\n      const factor = dp / d;\n      const rx = vector.copy();\n      rx.multiplyBy(factor);\n      return rx;\n    }\n    return new Vector();\n  }\n\n  /**\n  * Computes the angle (in radians) formed between the current instance and a given vector.\n  * @method\n  * @param {Vector} vector - A vector object.\n  * @returns {Float} Angle in radians.\n  */\n  angleBetween(vector) {\n    let v1 = this.copy();\n    let v2 = vector.copy();\n    v1.normalize();\n    v2.normalize();\n    let dot = v1.dot(v2);\n    let theta = Math.acos(dot);\n    if (isNaN(theta)) {\n      console.warn(\"Theta is 'NaN' on Vector.angleBetween()\")\n    }\n    return theta;\n  }\n\n  /**\n  * Returns the direction of the current vector's with respect to a given vector. The result is interpreted as:<br/>&nbsp;&nbsp;=0 in front<br/>&nbsp;&nbsp;-1 to the right<br/>&nbsp;&nbsp;=1 to the left\n  * @method\n  * @param {Vector} vector - A vector object.\n  * @returns {Int} One integer of [-1, 0, 1] interpreted as \"right\", \"in front\", \"left\".\n  */\n  angleDirection(vector) {\n    let crossProduct = this.cross(vector);\n    if (crossProduct > 0.0) {\n      return 1;\n    } else if (crossProduct < 0.0) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n  * Returns the angular difference betwee the current vector and a given vector\n  * @method\n  * @param {Vector} vector - A vector object.\n  * @returns {Float} Angle in radians.\n  */\n  angleDifference(vector) {\n    let theta = this.angleBetween(vector);\n    let dir = this.angleDirection(vector);\n    return theta * dir;\n  }\n\n  /**\n  * Creates a copy of the current instance.\n  * @method\n  * @returns {Vector} A copy of the current instance.\n  */\n  copy() {\n    return new Vector({\n      x: this.getX(),\n      y: this.getY()\n    });\n  }\n\n  /**\n  * Normalized the current vector instance converting it's magnitude to a value between 0 and 1.\n  * @method\n  */\n  normalize() {\n    var length = this.getLength();\n    if (length != 0) {\n      this.divideBy(length);\n    }\n  }\n\n  /**\n  * Computes the distance between the current instance and a given vector.\n  * @method\n  * @param {Vector} vector - A vector object.\n  * @returns {Float} The distance between the two vector.\n  */\n  dist(vector) {\n    let d = vector.substract(this);\n    return d.getLength();\n  }\n\n  /**\n  * Truncates the current instance's magnitude by a maximum value.\n  * @method\n  * @param {Float} max - The maximum magnitud for the vector's length.\n  */\n  limit(max) {\n    if (this.getLength() > max) {\n      this.setLength(max);\n    }\n  }\n\n  /**\n  * Resets the current instance's x and y components to 0.\n  * @method\n  */\n  reset() {\n    this.x = 0;\n    this.y = 0;\n  }\n\n};\n\nmodule.exports = Vector;\n","class Utils {\n\n  /**\n  * Generates a unique id.\n  * @method\n  * @returns {String} - A unique id.\n  */\n  uniqueID() {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n    }\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  /**\n  * Returns a random value between the defined range.\n  * @method\n  * @param {Float} min - Minimum value of the range.\n  * @param {Float} max - Maximum value of the range.\n  * @returns {Float} - A random value between min and max.\n  */\n  randomRange(min, max) {\n    return min + Math.random() * (max - min);\n  }\n\n  mapRange(value, low1, high1, low2, high2) {\n    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n  }\n\n  /**\n  * Generates a random angle between -pi and +pi.\n  * @method\n  * @returns {Float} - An angle in radians.\n  */\n  randomAngle() {\n    return this.randomRange(-Math.PI, Math.PI);\n  }\n\n  componentToHex(c) {\n    var hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n  }\n\n  rgbToHex(r, g, b) {\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n  }\n\n  hexToRgb(hex) {\n   var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n   return result ? {\n     r: parseInt(result[1], 16),\n     g: parseInt(result[2], 16),\n     b: parseInt(result[3], 16)\n   } : null;\n }\n\n randomColor() {\n   return \"#000000\".replace(/0/g,function(){return (~~(Math.random()*16)).toString(16);});\n }\n\n}\n\nconst instance = new Utils();\n\nmodule.exports = instance;\n","class Model {\n\n\tconstructor(settings) {\n    this.points = settings.points || [];\n\t\tthis.strokeColor = settings.strokeColor || null;\n    this.fillColor = settings.fillColor || null;\n    this.fillGradient = settings.fillGradient || null;\n\t\tthis.filter = settings.filter || null;\n\t\tthis.bounds = this.getBounds();\n\t\tthis.center = this.getCenter();\n\t\tthis.width = this.bounds.xMax - this.bounds.xMin;\n\t\tthis.height = this.bounds.yMax - this.bounds.yMin;\n\t\tthis.radius = Math.max(this.width, this.height) / 2;\n\t\tthis.children = settings.children || [];\n\t}\n\n  getPoints() {\n    return this.points;\n  }\n\n\tgetBounds() {\n\t\tconst xs = [];\n\t\tconst ys = [];\n\t\tfor (let i=0,len=this.points.length; i<len; i++) {\n\t\t\tconst point = this.points[i];\n\t\t\txs.push(point[0]);\n\t\t\tys.push(point[1]);\n\t\t}\n\t\treturn {\n\t\t\txMin: Math.min.apply(null, xs),\n\t\t\txMax: Math.max.apply(null, xs),\n\t\t\tyMin: Math.min.apply(null, ys),\n\t\t\tyMax: Math.max.apply(null, ys)\n\t\t};\n\t}\n\n\tgetCenter() {\n\t\treturn [\n\t\t\t(this.bounds.xMin + this.bounds.xMax) / 2,\n\t\t\t(this.bounds.yMin + this.bounds.yMax) / 2\n\t\t];\n\t}\n\n  transform(r, s, t) {\n\t\tt = t || [0, 0];\n    const transformed = [];\n\t\tfor (let j=0,len=this.points.length; j<len; j++) {\n      let p = this.points[j];\n\t\t\tif (r !== null) { p = this.rotatePoint(p, r); }\n\t\t\tif (s !== null) { p = this.scalePoint(p, s); }\n\t\t\tif (t !== null) { p = this.translatePoint(p, t); }\n\t\t\ttransformed.push(p);\n\t\t}\n    return new this.constructor({\n      points: transformed,\n      strokeColor: this.strokeColor,\n      fillColor: this.fillColor,\n\t\t\tfillGradient: this.fillGradient,//this.fillGradient ? this.transformGradient(this.fillGradient, r, s, t):null,\n\t\t\tfilter: this.filter,\n\t\t\tchildren: this.children.map(c => c.transform(r, s, t))\n    });\n\t}\n\n\ttransformInversion(t, s, r) {\n    const transformed = [];\n\t\tfor (let j=0,len=this.points.length; j<len; j++) {\n      let p = this.points[j];\n\t\t\tif (t !== null) { p = this.translatePoint(p, t); }\n\t\t\tif (s !== null) { p = this.scalePoint(p, s); }\n\t\t\tif (r !== null) { p = this.rotatePoint(p, r); }\n\t\t\ttransformed.push(p);\n\t\t}\n    return new this.constructor({\n      points: transformed,\n      strokeColor: this.strokeColor,\n      fillColor: this.fillColor,\n\t\t\tfillGradient: this.fillGradient,\n\t\t\tfilter: this.filter,\n\t\t\tchildren: this.children.map(c => c.transformInversion(t, s, r))\n    });\n\t}\n\n  rotatePoint(point, angle) {\n    return [\n      point[0] * Math.cos(angle) - point[1] * Math.sin(angle),\n      point[0] * Math.sin(angle) + point[1] * Math.cos(angle)\n    ];\n  }\n\n  scalePoint(point, scale) {\n    return [\n      point[0] * scale,\n      point[1] * scale\n    ]\n  }\n\n  translatePoint(point, position) {\n    return [\n      point[0] + position[0],\n      point[1] + position[1]\n    ]\n  }\n\n}\n\nmodule.exports = Model;\n","class Geometry {\n\n  rectangleRectangleIntersection(r1, r2) {\n    return this.rangeIntersect(r1.bounds.xMin, r1.bounds.xMin + r1.width, r2.bounds.xMin, r2.bounds.xMin + r2.width) &&\n      this.rangeIntersect(r1.bounds.yMin, r1.bounds.yMin + r1.height, r2.bounds.yMin, r2.bounds.yMin + r2.height);\n  }\n\n\tcircleRectangleIntersection(c, r) {\n\t\tconst distX = Math.abs(c.center[0] - r.bounds.xMin - r.width / 2);\n\t\tconst distY = Math.abs(c.center[1] - r.bounds.yMin - r.height / 2);\n\t\t// Out of range\n\t\tif (distX > (r.width / 2 + c.radius) || distY > (r.height / 2 + c.radius)) {\n\t\t\treturn false;\n\t\t}\n\t\t// In range\n\t\tif (distX <= (r.width / 2) || distY <= (r.height / 2)) {\n\t\t\treturn true;\n\t\t}\n\t\t// Rectangle corners\n\t\tconst dx = distX - r.width / 2;\n\t\tconst dy = distY - r.height / 2;\n\t\treturn (dx * dx + dy * dy <= (c.radius * c.radius));\n\t}\n\n\tcircleCircleIntersection(c1, c2) {\n\t\tconst xDist = c1.center[0] - c2.center[0];\n\t\tconst yDist = c1.center[1] - c2.center[1];\n\t\tconst distSquared = (xDist * xDist) + (yDist * yDist);\n\t\tconst radiusSquared = (c1.radius + c2.radius) * (c1.radius + c2.radius);\n\t\tif (distSquared < radiusSquared) {\n\t\t\treturn { x: xDist, y: yDist, dist_squared: distSquared };\n\t\t}\n\t\treturn false;\n\t}\n\n  rangeIntersect(min0, max0, min1, max1) {\n    return  Math.max(min0, max0) >= Math.min(min1, max1) &&\n      Math.min(min0, max0) <= Math.max(min1, max1);\n  }\n\n}\n\nmodule.exports = new Geometry();\n","const Vector = require('./Vector');\n\nclass Physics {\n\n  /**\n   * A singleton class that performs all physics computations between physical entities (like <i>Body</i> objects) in <i>DDW</i>.\n   * @summary View file: {@link https://github.com/GorillaBus/ddw/blob/master/src/class/Collision.js https://github.com/GorillaBus/ddw/blob/master/src/class/Physics.js}.\n   * @constructor\n   * @param {Object} settings - A Json object with construction parameters.\n   * @param {Float} [settings.G=9.8] - Gravity constant, a factor for many physical events.\n   */\n  constructor(settings) {\n    settings = settings || {};\n    this.G = settings.G || 9.8;\n  }\n\n  /**\n   * Computes and applies the attraction force from a given source-target <i>Body</i> pair, with the formula \"F = G * M * (m / r2)\". The magnitude will depend on both object's mass, distance and current speeds.<br/>\n   * <b>Note</b> that this method will not apply any force if both bodies are intersecting.\n   * @method\n   * @param {Body} target - The target body to compute the gravitation force.\n   * @param {Float} [G=1] - Gravity force factor.\n   * @returns {Vector} A vector representing the gravity full force to the target body.\n   */\n  gravity(source, target) {\n\t\tconst dir = target.location.substract(source.location);\n\t\tconst distance = dir.getLength();\n\t\tconst minDistance = target.getRadius() + source.getRadius();\n\t\tif (minDistance > distance) {\n\t\t\treturn;\n\t\t}\n\t\tconst force = this.G * (source.mass * target.mass / (distance * distance));\n\t\tdir.normalize();\n\t\tdir.multiplyBy(force);\n\t\tsource.applyForce(dir);\n\t}\n\n  /**\n   * Computes and applies the forces resulting from the collision of two bodies (<i>Body</i> class objects), based in their velocities (speeds and directions) at the moment of impact (which is always approximative, as bodies most of the times bodies will be overlaping at the time being checked). Once a collision between a pair of <i>Body</i> objects has been resolved it will never be resolved again during the current iteration: only entitiy pair where at least one is heading towards the other are resolved, a situation that is not possible after a the collision forces are applied to the pair of bodies.<br/>\n   * As an optimization we are save a Math.sqrt() when calculating the distance between the two bodies, as we don't require its meassure.\n   * @method\n   * @param {Body} source - Usually the fist level <i>Body</i> object whithin <b>DDW</b>'s main iteration.\n   * @param {Body} target - The <i>Body</i> to which the source is being checked.\n   * @param {Object} intersection - An Json object containing the X and Y components of the vector from the center of the source to the center of the target body, and the square of the distance between them (as we don't require the meassure, we can save a Math.sqrt() when computing the distance).\n   * @returns {Vector} A vector representing the gravity full force to the target body.\n   */\n  elasticCollision(source, target, intersection) {\n\n\t\t// Displacement vector (difference in velocity)\n\t\tconst xVelocity = target.velocity.getX() - source.velocity.getX();\n\t\tconst yVelocity = target.velocity.getY() - source.velocity.getY();\n\n\t\t// If both bodies are moving away from each other, discard collision\n\t\tconst dotProduct = (intersection.x * xVelocity) + (intersection.y * yVelocity);\n\n\t\t// Collision handling\n\t\tif (dotProduct > 0) {\n\n\t\t\t// The resulting force from the collision (angle difference + velocity difference)\n\t\t\tconst collisionScale = dotProduct / intersection.dist_squared;\n\n\t\t\t// Collision Vector\n\t\t\tconst collision = {\n\t\t\t\tx: intersection.x * collisionScale,\n\t\t\t\ty: intersection.y * collisionScale\n\t\t\t};\n\n\t\t\t// Restitution aproximation\n\t\t\tconst totalDensity = source.density + target.density;\n\t\t\tconst r1 = (source.density / totalDensity) / 2;\n\t\t\tconst r2 = (target.density / totalDensity) / 2;\n\n\t\t\t// 2D Elastic collision\n\t\t\tconst combinedMass = source.mass + target.mass;\n\t\t\tconst collisionWeight1 = (2 * target.mass / combinedMass) * 0.1;\n\t\t\tconst collisionWeight2 = (2 * source.mass / combinedMass) * 0.25;\n\t\t\tconst collisionResult1 = new Vector({\n\t\t\t\tx: collisionWeight1 * collision.x,\n\t\t\t\ty: collisionWeight1 * collision.y\n\t\t\t});\n\t\t\tconst collisionResult2 = new Vector({\n\t\t\t\tx: collisionWeight2 * collision.x,\n\t\t\t\ty: collisionWeight2 * collision.y\n\t\t\t})\n\t\t\t.multiply(-1);\n\n\t\t\tsource.applyNetForce(collisionResult1);\n\t\t\ttarget.applyNetForce(collisionResult2);\n\t\t}\n\t}\n\n  /**\n   * Calculates the required distance that a body requires to achieve a stable orbit around a target body, given a desired speed.\n   * <b>Note</b> that, for optimization reasons, this method will not check for intersection between both radius, its up to the user to verify that the given distance is greater than the sum of both radiuses.\n   * @method\n   * @param {Body} body - The orbiting <i>Body</i> object.\n   * @param {Body} target - The target <i>Body</i>.\n   * @param {Float} speed - The desired orbit speed for the first body.\n   * @returns {Float} The required speed at which the body should orbit the target given their properties and distance.\n   */\n  orbitDistanceBySpeed(body, target, speed) {\n    return (body.mass * target.mass) / speed;\n  }\n\n  /**\n   * Calculates the required speed that a body requires to achieve a stable orbit around a target body.\n   * @method\n   * @param {Body} body - The <i>Body</i> object to orbit the target.\n   * @param {Body} target - The target <i>Body</i>.\n   * @returns {Float} The required speed at which the first body should orbit the target, given their properties and distance.\n   */\n  orbitSpeedByDistance(body, target, G) {\n    G = G || 9.8;\n    const distance = body.distanceTo(target);\n    return Math.sqrt((G * target.mass) / distance);\n  }\n\n}\n\nmodule.exports = new Physics();\n","const Vector = require('./Vector');\nconst Utils = require('./Utils');\n\nclass Body {\n\n\t/**\n\t * A <i>Body</i> object is the logical representation of a physical entity in <b>DDW</b>. It has physical proerties like mass, size, a position in the world, it can interact with other <i>Body</i> objects and forces. In <b>DDW</b> the shape of an <i>Body</i> is represented by a (or a set of) polygon(s), described by a set of points in a <i>Model</i> class object.<br/>\n\t * A body has a location and velocity vector that describe its position in the world and movement in terms of speed and direction, and an angle and angle velocity properties, representing its current angle position and rotation speed.\n\t * @summary View file: {@link https://github.com/GorillaBus/DDW/blob/master/src/class/Body.js https://github.com/GorillaBus/DDW/blob/master/src/class/Body.js}.\n\t * @constructor\n\t * @param {Object} settings - Json object with construction options\n\t * @param {Float} [settings.x=0] - X axis position of the body's center in the world.\n\t * @param {Float} [settings.y=0] - Y axis position of the body's center in the world.\n\t * @param {Float} [settings.scale=0] - Scale factor.\n\t * @param {Float} [settings.angle=0] - The body's orientation angle in radians.\n\t * @param {Float} [settings.speed=0] - Movement speed on the current direction.\n\t * @param {Float} [settings.mass=1] - The mass of the entity.\n\t * @param {Boolean} [settings.visible=true] - Wether this entity is graphicable or not.\n\t * @param {Object} settings.model - A Model class object representing the shape of the entity.\n\t */\n\tconstructor(settings) {\n\t\tsettings = settings || {};\n\t\tsettings.x = settings.x || 0;\n\t\tsettings.y = settings.y || 0;\n    settings.speed = settings.speed || 0;\n\t\tsettings.heading = settings.heading || 0;\n\n    this.angleAcceleration = 0;\n    this.angleVelocity = settings.angleVelocity || 0;\n\t\tthis.angle = settings.angle || 0;\n\t\tthis.acceleration = new Vector({ x: 0, y: 0 });\n\t\tthis.velocity = new Vector({ length: settings.speed, angle: settings.heading });\n\t\tthis.location = new Vector({ x: settings.x, y: settings.y });\n\t\tthis.mass = settings.mass || 1;\n\t\tthis.scale = settings.scale || 1;\n\t\tthis.uuid = Utils.uniqueID();\n    this.model = settings.model;\n    this.world = this.getWorldTransform();\n\t}\n\n\t/**\n\t * Returns the current rotation angle of the <i>Body</i>.\n\t * @method\n\t * @returns {float} - Angle in radians.\n\t */\n  getAngle() {\n    return this.angle;\n  }\n\n\t/**\n\t * Returns the radius of the circle that bounds the entity (can sometimes be interpreted as width).\n\t * @method\n\t * @returns {float} - Radius.\n\t */\n\tgetRadius() {\n\t\treturn this.world.radius;\n\t}\n\n\t/**\n\t * Returns the current scale of the <i>Body</i>.\n\t * @method\n\t * @returns {float} - Scale.\n\t */\n  getScale() {\n    return this.scale;\n  }\n\n\t/**\n\t * Returns the current velocity direction of the _Body, expressed as an angle in radians.\n\t * @method\n\t * @returns {float} - Angle in radians.\n\t */\n\tgetHeading() {\n\t\treturn this.velocity.getAngle();\n\t}\n\n\t/**\n\t * Changes the <i>Body</i>'s current movement direction angle.\n\t * @param {Float} - An angle in radians.\n\t * @method\n\t * @returns {float} - Angle in radians.\n\t */\n\tsetHeading(angle) {\n\t\tthis.velocity.setAngle(angle);\n\t}\n\n\t/**\n\t * Returns the current movement speed of the _Body.\n\t * @method\n\t * @returns {float} - Speed.\n\t */\n\tgetSpeed() {\n\t\treturn this.velocity.getLength();\n\t}\n\n\t/**\n\t * Change the <i>Body</i>'s current movement speed.\n\t * @param {Float} - The desired speed.\n\t * @method\n\t * @returns {float} - Angle in radians.\n\t */\n\tsetSpeed(speed) {\n\t\tthis.velocity.setLength(speed);\n\t}\n\n\t/**\n\t * Returns the current location vector of the <i>Body</i>.\n\t * @method\n\t * @returns {float} - Speed.\n\t */\n  getLocation() {\n    return this.location;\n  }\n\n\t/**\n\t * Set a new position for the entity.\n\t * @param {Vector} - The desired position expressed as a <i>Vector</i> class object.\n\t * @method\n\t */\n\tsetPosition(position) {\n\t\tthis.location = position;\n\t}\n\n\t/**\n\t * Returns <i>Body</i>'s bounding recangle, which is defined as four points polygonal shape that bounds the total of the points that compose the <i>Body</i>'s model. Can be used to verify the geometrical intersection between a <i>Body</i> and other entities.\n\t * @method\n\t * @returns {Array} - An array of four coordinate points (as sub-arrays with X [0] and Y [1] values).\n\t */\n\tgetBoundingRect() {\n\t\treturn [\n\t\t\t[this.world.bounds.xMin, this.world.bounds.yMin],\n\t\t\t[this.world.bounds.xMin, this.world.bounds.yMax],\n\t\t\t[this.world.bounds.xMax, this.world.bounds.yMax],\n\t\t\t[this.world.bounds.xMax, this.world.bounds.yMin]\n\t\t];\n\t}\n\n\t/**\n\t * Updates the state of <i>Body</i>'s object in the world: its position, velocity, angle and rotating speed. It also updates the world-transformation of the model that represents the entity.\n\t * @method\n\t */\n\tupdate() {\n    // Update Position\n\t\tthis.velocity.addTo(this.acceleration);\n\t\tthis.location.addTo(this.velocity);\n\t\tthis.acceleration.multiplyBy(0);\n    // Update angle\n    this.angleVelocity += this.angleAcceleration;\n    this.angle += this.angleVelocity;\n    this.angleAcceleration = 0;\n    // World transformation\n    this.world = this.getWorldTransform();\n\t}\n\n\t/**\n\t * Performs a world-transformation on the <i>Body</i>'s model. This method is executed on each time step to reflect the entity's geometrical representation in the world.\n\t * @method\n\t * @returns {Model} - The new transformed <i>Model</i> class object.\n\t */\n  getWorldTransform() {\n    return this.model.transform(this.angle, this.scale, [this.location.getX(), this.location.getY()]);\n  }\n\n\t/**\n\t * Applies a force to the entity, expressed as a <i>Vector</i> class object. The magnitude of the force is divided by the <i>Body</i>'s mass.\n\t * @method\n\t */\n\tapplyForce(force) {\n\t\tlet f = force.divide(this.mass);\n\t\tthis.acceleration.addTo(f);\n\t}\n\n\t/**\n\t * Applies a force to the entity, expressed as a <i>Vector</i> class object. This magnitude of the force will not be divided by the _Body's_ mass.\n\t * @method\n\t */\n\tapplyNetForce(force) {\n\t\tthis.acceleration.addTo(force);\n\t}\n\n\t/**\n\t * Resets the velocity magnitude (speed) to zero.\n\t * @method\n\t */\n\tresetVelocity() {\n\t\tthis.velocity.multiplyBy(0);\n\t}\n\n\t/**\n\t * Calculates the distance from one <i>Body</i> object to another, from surface to surface.\n\t * @method\n\t * @returns {Model} - The new transformed <i>Model</i> class object.\n\t */\n\tdistanceTo(target) {\n\t\treturn target.location.substract(this.location).getLength() - this.getRadius() - target.getRadius();\n\t}\n\n}\n\nmodule.exports = Body;\n","class SpatialPartitioner {\n\n\tconstructor(settings) {\n\t\tsettings = settings || {};\n\t\tthis.cellSize = settings.cellSize || 128;\n    this.neighborRange = settings.neighborRange || 1;\n\t\tthis.cells = [];\n    this.cellIndex = {};\n\t\tthis.debug = settings.debug || false;\n\t}\n\n  run() { }\n\n\tgetCell(cellId) {\n\t\tif (this.cellIndex[cellId]) {\n      return this.cellIndex[cellId];\n    }\n\t}\n\n\tgetCells() {\n\t\treturn this.cells;\n\t}\n\n  getNeighborCells(cell) {\n    const neighborCells = [];\n    const neighborIds = this.getNeighborCellIds(cell.x, cell.y);\n    for (let i=0,len=neighborIds.length; i<len; i++) {\n      const id = neighborIds[i];\n      const neighbor = this.getCell(id);\n      if (neighbor) {\n        neighborCells.push(neighbor);\n      }\n    }\n    return neighborCells;\n  }\n\n  getNeighborCellIds(x, y) {\n    return [\n      [x - 1, y - 1].join(\"_\"),\n      [x, y - 1].join(\"_\"),\n      [x + 1, y - 1].join(\"_\"),\n      [x + 1, y].join(\"_\"),\n      [x + 1, y + 1].join(\"_\"),\n      [x, y + 1].join(\"_\"),\n      [x - 1, y + 1].join(\"_\"),\n      [x - 1, y].join(\"_\")\n    ];\n  }\n\n\taddCell(cellData) {\n    const cell = {\n\t\t\t...cellData,\n\t\t\tbodies: []\n\t\t};\n\t\tthis.cells.push(cell);\n    this.cellIndex[cellData.id] = cell;\n\t\treturn cell;\n\t}\n\n\tresetGrid() {\n\t\tthis.cells = [];\n    this.cellIndex = {};\n\t}\n\n  registerBody(body, center) {\n    const point = body.world.getCenter();\n    const cellData = this.pointPosition(point);\n\n    // Create new cell if required\n    let cell = this.getCell(cellData.id);\n    if (!cell) {\n      cell = this.addCell(cellData);\n    }\n\n    // Add body in cell's collection\n    cell.bodies.push(body);\n  }\n\n\tpointPosition(point) {\n\t\tconst xComponent = Math.floor(point[0] / this.cellSize);\n\t\tconst yComponent = Math.floor(point[1] / this.cellSize);\n    return {\n      x: xComponent,\n      y: yComponent,\n      id: [xComponent, yComponent].join(\"_\")\n    }\n\t}\n\n}\n\nmodule.exports = SpatialPartitioner;\n","class GloalInteraction {\n\n  run() { }\n\n  resolve(bodies, cb) {\n    for (let i=0, len=bodies.length; i<len; i++) {\n      const bodyA = bodies[i];\n      for (let j=0, len=bodies.length; j<len; j++) {\n        const bodyB = bodies[j];\n        if (bodyA.uuid === bodyB.uuid) continue;\n        cb(bodyA, bodyB);\n      }\n    }\n  }\n\n}\n\nmodule.exports = GloalInteraction;\n","const SpatialPartitioner = require(\"./SpatialPartitioner\");\n\nclass SpatialInteraction extends SpatialPartitioner {\n\n  run() { }\n\n  resolve(localResolver, neighborResolver) {\n    neighborResolver = neighborResolver || localResolver;\n\n    // Iterate cells\n    for (let i=0, len=this.cells.length; i<len; i++) {\n      const currentCell = this.cells[i];\n\n      // Find neighbor cells\n      const neighborCells = this.getNeighborCells(currentCell);\n\n      // Iterate local bodies\n      for (let j=0,len=currentCell.bodies.length; j<len; j++) {\n        const currentBody = currentCell.bodies[j];\n\n        // Resolve local-local pairs\n        for (let k=0,len=currentCell.bodies.length; k<len; k++) {\n          const localBody = currentCell.bodies[k];\n          if (currentBody.uuid === localBody.uuid) continue;\n          localResolver(currentBody, localBody);\n        }\n\n        // Resolve local-neighbor pairs\n        for (let k=0,len=neighborCells.length; k<len; k++) {\n          const currentNeighborCell = neighborCells[k];\n          for (let l=0,len=currentNeighborCell.bodies.length; l<len; l++) {\n            const neighborBody = currentNeighborCell.bodies[l];\n            neighborResolver(currentBody, neighborBody);\n          }\n        }\n      }\n    }\n\t}\n\n}\n\nmodule.exports = SpatialInteraction;\n","const Utils = require(\"./src/class/Utils\");\nconst PolygonGenerator = require(\"./src/class/PolygonGenerator\");\nconst Model = require(\"./src/class/Model\");\nconst ModelDrawer = require(\"./src/class/ModelDrawer\");\nconst Scene = require(\"./src/class/Scene\");\nconst ScenePlayer = require(\"./src/class/ScenePlayer\");\nconst Body = require(\"./src/class/Body\");\nconst Vector = require(\"./src/class/Vector\");\nconst Viewport = require(\"./src/class/Viewport\");\nconst SpatialPartitioner = require(\"./src/class/SpatialPartitioner\");\nconst GlobalInteraction = require(\"./src/class/GlobalInteraction\");\nconst SpatialInteraction = require(\"./src/class/SpatialInteraction\");\nconst Collision = require(\"./src/class/Collision\");\nconst Gravity = require(\"./src/class/Gravity\");\nconst Physics = require(\"./src/class/Physics\");\nconst Geometry = require(\"./src/class/Geometry\");\n\nmodule.exports = {\n\tUtils,\n\tPolygonGenerator,\n\tModel,\n\tModelDrawer,\n\tScene,\n\tBody,\n\tScenePlayer,\n\tVector,\n\tViewport,\n\tSpatialPartitioner,\n\tSpatialInteraction,\n\tGlobalInteraction,\n\tCollision,\n\tGravity,\n\tPhysics,\n\tGeometry\n}\n","/**\n * A singleton class that provides a methods for generating sets of points that describe complex polygonal shapes.\n * @summary View file: {@link https://github.com/GorillaBus/ddw/blob/master/src/class/BodyManager.js https://github.com/GorillaBus/ddw/blob/master/src/class/PolygonGenerator.js}.\n * @class\n */\n\nclass PolygonGenerator {\n\n  /**\n\t* Generates a set of points for a circular shape.\n\t* @method\n  * @param {Object} settings - Json object that specify different aspects of the desired shape.\n\t* @param {Int} [settings.divs=32] - Number of identically sepparated points around the circle's center.\n\t* @param {Float} [settings.radius=1] - Radius of the circle.\n\t* @returns {Array} An array of points that describe the shape. \n\t*/\n  circle(settings) {\n    const divs = settings.divs || 32;\n    const radius = settings.radius || 1;\n    const angleFraction = (Math.PI * 2) / settings.divs;\n    const points = [];\n    for (let i=0; i<divs; i++) {\n      const point = [\n        Math.cos(angleFraction * i + 1) * radius,\n        Math.sin(angleFraction * i + 1) * radius,\n      ];\n      points.push(point);\n    }\n    return points;\n  }\n\n}\n\nmodule.exports = new PolygonGenerator();\n","const Vector = require(\"./Vector\");\n\n/**\n * Draw <i>Model</i> class objects on a 2D context (html canvas) by joining each of its points with lines, filling the shape with color or gradients and also rendering other effects like inner shadow or 2D context filters.\n * @summary View file: {@link https://github.com/GorillaBus/ddw/blob/master/src/class/BodyManager.js https://github.com/GorillaBus/ddw/blob/master/src/class/ModelDrawer.js}.\n * @class\n */\n\nclass ModelDrawer {\n\n\t/**\n\t* Paints a representation of the given <i>Model</i> class object with all its features on the given 2D context. A <i>Model</i> object can have different rendering properties from fill and stroke colors to a fill gradient, but also any 2D rendering context filters like blur.\n\t* @method\n\t* @param {Model} model - A Model object to be drawn.\n\t* @param {Object} ctx - A 2D rendering context object from the html canvas.\n\t*/\n\tdrawModel(model, ctx) {\n    const points = model.getPoints();\n\n\t\tif (model.filter) {\n\t\t\tctx.save()\n\t\t\tctx.filter = model.filter;\n\t\t}\n\n\t\tctx.beginPath();\n\t\tfor (let i = 0, len=points.length; i<len; i++) {\n\t\t\tconst a = points[i];\n\t\t\tconst b = i === len - 1 ? points[0] : points[i + 1];\n\t\t\tif (i === 0) {\n\t\t\t\tctx.moveTo(a[0], a[1]);\n\t\t\t}\n\t\t\tctx.lineTo(b[0], b[1]);\n\t\t}\n\t\tctx.closePath();\n\n\t\tif (model.strokeColor) {\n\t\t\tctx.strokeStyle = model.strokeColor;\n\t\t\tctx.stroke();\n\t\t}\n\n\t\tif (model.fillColor) {\n\t\t\tctx.fillStyle = model.fillColor;\n\t\t\tctx.fill();\n\t\t}\n\n\t\tif (model.fillGradient) {\n\t\t\tctx.fillStyle = this.createRadialGradient(model, ctx);\n\t\t\tctx.fill();\n\t\t}\n\n\t\tif (model.filter) {\n\t\t\tctx.restore();\n\t\t}\n\n\t\tmodel.children.map(m => this.drawModel(m, ctx));\n\t}\n\n\t/**\n\t* Draws the bounding rectangle of a <i>Model</i> object, generally for debugging purposes.\n\t* @method\n\t* @param {Model} model - A Model object to be drawn.\n\t* @param {Object} ctx - A 2D rendering context object from the html canvas.\n\t*/\n\tdrawBoundingRectangle(model, ctx) {\n\t\tctx.beginPath();\n    ctx.strokeStyle = \"yellow\";\n    ctx.strokeRect(model.bounds.xMin, model.bounds.yMin, model.width, model.height);\n    ctx.closePath();\n\t}\n\n\t/**\n\t* Draws the bounding circle of a <i>Model</i> object, generally for debugging purposes.\n\t* @method\n\t* @param {Model} model - A Model object to be drawn.\n\t* @param {Object} ctx - A 2D rendering context object from the html canvas.\n\t*/\n\tdrawBoundingCircle(model, ctx) {\n\t\tctx.beginPath();\n    ctx.strokeStyle = \"yellow\";\n    ctx.arc(model.center[0], model.center[1], model.radius, 0, 2 * Math.PI);\n\t\tctx.stroke();\n\t\tctx.closePath();\n\t}\n\n\t/**\n\t* Paints a circular inner shadow over the <i>Model</i> that depends on a light source.\n\t* @method\n\t* @experimental\n\t* @param {Model} model - A Model object to render its inner shadow.\n\t* @param {Model} lightSource - A Model object that represents the source of the light\n\t* @param {Object} ctx - A 2D rendering context object from the html canvas.\n\t* @param {Model} [shadowScale=6] - A relation between the size of the <i>Model</i> and its inner shadow.\n\t* @param {Model} [shadowSpread=0.92] - The rational length of the gradient that decays from full shadow to none.\n\t* @param {Model} [shadowDisplacement=0.94] - A ratio that express how far away from the <i>Model</i>'s center its shadow will appear.\n\t*/\n\tdrawInnerShadow(model, lightSource, ctx, shadowScale, shadowDisplacement, shadowSpread) {\n\t\tif (model.radius < 1) { return; }\n\n\t\tshadowScale = shadowScale || 6;\n\t\tshadowDisplacement = shadowDisplacement || 0.92;\n\t\tshadowSpread = shadowSpread || 0.94;\n\n\t  const shadowModelRadius = model.radius * shadowScale;\n\t  const shadowVector = new Vector({\n\t    x: model.center[0] - lightSource.center[0],\n\t    y: model.center[1] - lightSource.center[1]\n\t  });\n\n\t  shadowVector.normalize();\n\t  shadowVector.multiplyBy(shadowModelRadius * shadowDisplacement);\n\t\tshadowVector.x += model.center[0];\n\t  shadowVector.y += model.center[1];\n\n\t  ctx.save();\n\n\t  // Create clipping path\n\t  let region = new Path2D();\n\t  region.arc(model.center[0], model.center[1], model.radius + 1, 0, Math.PI*2, true);\n\t  ctx.clip(region);\n\n\t  // Shadow model\n\t  const gradient = ctx.createRadialGradient(shadowVector.getX(), shadowVector.getY(), shadowModelRadius * shadowSpread, shadowVector.getX(), shadowVector.getY(), shadowModelRadius);\n\t  gradient.addColorStop(0, \"rgba(0, 0, 0, 0.9)\");\n\t  gradient.addColorStop(1, \"rgba(0, 0, 0, 0.001)\");\n\n\t  ctx.beginPath();\n\t  ctx.fillStyle = gradient;\n\t  ctx.arc(shadowVector.getX(), shadowVector.getY(), shadowModelRadius, 0, Math.PI * 2, true);\n\t  ctx.fill();\n\t  ctx.closePath();\n\n\t  ctx.restore();\n\t}\n\n\t/**\n\t* Creates a 2D rendering context radial gradient from a <i>Model</i>'s fillGradient property.\n\t* @method\n\t*/\n\tcreateRadialGradient(model, ctx) {\n\t\tconst gradient = ctx.createRadialGradient(model.center[0],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel.center[1],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel.center[0],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel.center[1],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel.radius);\n\n\t\tgradient.addColorStop(0, model.fillGradient.stop1);\n\t\tgradient.addColorStop(1, model.fillGradient.stop2);\n\t\treturn gradient;\n\t}\n\n}\n\nmodule.exports = ModelDrawer;\n","const Model = require(\"./Model\");\n\nclass Scene {\n\n\tconstructor(settings) {\n\t\tsettings = settings || {};\n    this.bodies = settings.bodies || [];\n\t\tthis.width = settings.width || 800;\n\t\tthis.height = settings.height || 600;\n\t\tthis.lightSource = settings.lightSource || null;\n    this.viewport = settings.viewport;\n    this.drawer = settings.drawer;\n\t\tthis.ctx = settings.ctx;\n\t\tthis.spatialInteractions = settings.spatialInteractions || [];\n\t\tthis.globalInteractions = settings.globalInteractions || [];\n    this.playerFps = 0;\n    this.debug = settings.debug || false;\n\t\tthis.init();\n\t}\n\n\tinit() {\n\t\tthis.boundries = [{\n\t\t\tx: -this.width / 2,\n\t\t\ty: -this.height / 2\n\t\t}, {\n\t\t\tx: this.width / 2,\n\t\t\ty: -this.height / 2\n\t\t}, {\n\t\t\tx: this.width / 2,\n\t\t\ty: this.height / 2\n\t\t}, {\n\t\t\tx: -this.width / 2,\n\t\t\ty: this.height / 2\n\t\t}];\n\t\tthis.ctx.translate(this.width / 2, this.height / 2);\n\t\tthis.run = this.run.bind(this);\n\t}\n\n\trun() {\n    this.ctx.clearRect(this.boundries[0].x, this.boundries[0].y, this.width, this.height);\n\n    this.update();\n    this.runSpatialInteractions();\n\t\tthis.runGlobalInteractions();\n\n\t\tif (this.debug) this.debugDraw();\n    this.draw();\n  }\n\n  update() {\n    this.viewport.update();\n\t\tthis.resetSpatialInteractions();\n    for (let i=0, len=this.bodies.length; i<len; i++) {\n      const body = this.bodies[i];\n      body.update();\n      this.spatialRegister(body);\n    }\n\t}\n\n\tdraw() {\n\t\tconst lightSourceViewModel = this.lightSource ? this.viewport.getRelativeView(this.lightSource):null;\n\n    for (let i=0, len=this.bodies.length; i<len; i++) {\n      const body = this.bodies[i];\n      if (this.viewport.intersects(body)) {\n\n\t\t\t\tconst bodyViewModel = this.viewport.getRelativeView(body);\n\n\t\t\t\tthis.drawer.drawModel(bodyViewModel, this.ctx);\n\n\t\t\t\tif (body.drawShadow && this.lightSource && this.lightSource.uuid !== body.uuid) {\n\t\t\t\t\tthis.drawer.drawInnerShadow(bodyViewModel, lightSourceViewModel, this.ctx);\n\t\t\t\t}\n\n      }\n    }\n\n\t\t// Framerate\n    this.printText(\"FPS: \"+ this.playerFps);\n\t}\n\n\tdebugDraw() {\n    // Display Spatial Partitioning grids\n\t\tthis.spatialInteractions.forEach(spi => {\n\t\t\tif (spi.debug) this.drawSpatialGrid(spi);\n\t\t});\n  }\n\n\trunGlobalInteractions() {\n\t\tfor (let i=0,len=this.globalInteractions.length; i<len; i++) {\n\t\t\tthis.globalInteractions[i].run(this.bodies);\n\t\t}\n\t}\n\n\trunSpatialInteractions() {\n\t\tfor (let i=0,len=this.spatialInteractions.length; i<len; i++) {\n\t\t\tthis.spatialInteractions[i].run();\n\t\t}\n\t}\n\n\tresetSpatialInteractions() {\n\t\tfor (let i=0,len=this.spatialInteractions.length; i<len; i++) {\n\t\t\tthis.spatialInteractions[i].resetGrid();\n\t\t}\n\t}\n\n\tspatialRegister(body) {\n\t\tfor (let i=0,len=this.spatialInteractions.length; i<len; i++) {\n\t\t\tthis.spatialInteractions[i].registerBody(body);\n\t\t}\n\t}\n\n\tdrawSpatialGrid(spi) {\n\t\tconst cells = spi.getCells();\n    const cellSize = spi.cellSize;\n\n    cells.forEach(c => {\n\t\t\tconst neighborRange = cellSize * spi.neighborRange;\n      const cellModel = new Model({\n        points: [\n          [c.x * cellSize, c.y * cellSize],\n          [c.x * cellSize + cellSize, c.y * cellSize],\n          [c.x * cellSize + cellSize, c.y * cellSize + cellSize],\n          [c.x * cellSize, c.y * cellSize + cellSize],\n        ],\n        strokeColor: \"rgba(0, 255, 0, 0.6)\"\n      });\n\t\t\tconst neighborhoodModel = new Model({\n        points: [\n          [c.x * cellSize - neighborRange, c.y * cellSize - neighborRange],\n          [c.x * cellSize + cellSize + neighborRange, c.y * cellSize - neighborRange],\n          [c.x * cellSize + cellSize + neighborRange, c.y * cellSize + cellSize + neighborRange],\n          [c.x * cellSize - neighborRange, c.y * cellSize + cellSize + neighborRange]\n        ],\n        strokeColor: \"rgba(55, 20, 0, 0.6)\"\n      });\n      const v1 = this.viewport.getRelativeView({ getScale: () => 1, world: cellModel });\n\t\t\tconst v2 = this.viewport.getRelativeView({ getScale: () => 1, world: neighborhoodModel });\n\t\t\tthis.drawer.drawModel(v1, this.ctx);\n\t\t\tthis.drawer.drawModel(v2, this.ctx);\n    });\n\n\t}\n\n  printText(text, x, y) {\n    x = x || this.boundries[0].x;\n    y = y || this.boundries[0].y + 20;\n    this.ctx.font = \"16px Arial\";\n    this.ctx.fillStyle = \"red\";\n    this.ctx.fillText(text, x, y);\n  }\n\n}\n\nmodule.exports = Scene;\n","class ScenePlayer {\n\n\tconstructor(settings) {\n\t\tsettings = settings || {};\n\t\tthis.scene = settings.scene;\n\t\tthis.fps = settings.fps || 60;\n\t\tthis.playing = false;\n\t\tthis.requestId = null;\n\t\tthis.then = 0;\n\t\tthis.startTime = 0;\n\t\tthis.fpsInterval = 1000 / this.fps;\n\t\tthis.frameCount = 0;\n\t\tthis.framerate = 0;\n\t\tthis.forward = this.forward.bind(this);\n\t}\n\n\tgetFps() {\n\t\treturn this.framerate;\n\t}\n\n\tplay() {\n\t\tthis.playing = true;\n\t\tthis.reset();\n\t\tthis.forward();\n\t}\n\n\tforward(newtime) {\n\t\tthis.requestId = window.requestAnimationFrame(this.forward);\n    const elapsed = newtime - this.then;\n    if (elapsed > this.fpsInterval) {\n        this.then = newtime - (elapsed % this.fpsInterval);\n\t\t\t\t// Draw scene\n\t\t\t\tthis.scene.run();\n\t\t\t\t// Calculate framerate\n        const sinceStart = newtime - this.startTime;\n        this.framerate = Math.round(1000 / (sinceStart / ++this.frameCount) * 100) / 100;\n\t\t\t\t// Pass framerate to scene\n\t\t\t\tthis.scene.playerFps = this.framerate;\n\t\t}\n\t}\n\n\tstop() {\n\t\tif (!this.playing) { return false; }\n\t\twindow.cancelAnimationFrame(this.requestId);\n\t\tthis.playing = false;\n\t\tthis.requestId = null;\n\t}\n\n\treset() {\n\t\tthis.then = performance.now();\n    this.startTime = this.then;\n\t\tthis.frameCount = 0;\n\t}\n\n}\n\nmodule.exports = ScenePlayer;\n","const Body = require(\"./Body\");\nconst Model = require(\"./Model\");\nconst Utils = require(\"./Utils\");\nconst Geometry = require(\"./Geometry\");\n\nclass Viewport extends Body {\n\n  constructor(settings) {\n    super({\n\t\t\t\tangle: settings.angle || 0,\n\t\t\t\tscale: settings.scale || 1,\n\t\t\t\tmodel: new Model({\n          points: [\n            [-settings.width/2, -settings.height/2],\n            [-settings.width/2,  settings.height/2],\n            [settings.width/2,   settings.height/2],\n            [settings.width/2,  -settings.height/2]\n          ]\n        })\n\t\t});\n    this.geometry = Geometry;\n    this.width = settings.width || 800;\n    this.height = settings.height || 600;\n\t\tthis.attached = settings.attachTo || false;\n    this.transitions = [];\n\t}\n\n  update() {\n\n    if (this.attached) {\n      this.location.x = this.attached.location.getX();\n      this.location.y = this.attached.location.getY();\n\n    } else {\n\n  \t\tthis.velocity.addTo(this.acceleration);\n  \t\tthis.location.addTo(this.velocity);\n  \t\tthis.acceleration.multiplyBy(0);\n      this.angleVelocity += this.angleAcceleration;\n      this.angle += this.angleVelocity;\n      this.angleAcceleration = 0;\n    }\n\n    this.world = this.getWorldTransform();\n\n    this.runTransitions();\n\t}\n\n  intersects(body) {\n    const main = this.geometry.rectangleRectangleIntersection(body.world, this.world);\n    if (main) {\n      return main;\n    }\n    if (body.world.children.length > 0) {\n      for (let i=0,len=body.world.children.length; i<len; i++) {\n        const child = body.world.children[i];\n        const itc = this.geometry.rectangleRectangleIntersection(child, this.world);\n        if (itc) {\n          return itc;\n        }\n      }\n    }\n    return false;\n  }\n\n  attachTo(body) {\n    this.attached = body;\n  }\n\n  detach() {\n    this.attached = null;\n  }\n\n  addTransition(t) {\n    this.detach();\n    this.transitions.push(t);\n  }\n\n  runTransitions() {\n    for (let i=0; i<this.transitions.length; i++) {\n\n        const t = this.transitions[i];\n\n        // Remove transition\n        if (t.steps === 0) {\n          if (typeof t.end === 'function') t.end();\n          this.transitions.splice(i, 1);\n          continue;\n        }\n\n        // Translation\n        if (t['translate']) {\n          const dir = t.translate.location.add(t.translate.velocity).substract(this.location);\n          const dist = dir.getLength();\n          const translateStep = dist / t.steps;\n          dir.normalize();\n          dir.multiplyBy(translateStep);\n          this.location.addTo(dir);\n        }\n\n        // Scale\n        if (t['scale']) {\n          const scaleStep = (t.scale - this.scale) / t.steps;\n          this.scale += scaleStep;\n        }\n\n        // Update transition state\n        t.steps--;\n    }\n  }\n\n  transitionTo(body, steps, zoom, cb) {\n    body = body || null;\n    steps = steps || 100;\n    zoom = zoom || 2;\n    cb = cb || null;\n    const t = {\n      steps,\n      translate: body,\n      scale: zoom,\n      end: cb\n    };\n    this.addTransition(t);\n  }\n\n  getRelativeView(body) {\n    const location = this.attached ? this.attached.location:this.location;\n\t\tconst t = [\n\t\t\tlocation.getX() * -1,\n\t\t\tlocation.getY() * -1\n\t\t];\n\t\tconst r = this.getAngle() * -1;\n\t\tconst s = body.getScale() / this.getScale();\n    return body.world.transformInversion(t, s, r);\n  }\n\n\trotateLeft(magnitude) {\n\t\tmagnitude = magnitude || 0.01;\n\t\tthis.angle -= magnitude;\n\t}\n\n\trotateRight(magnitude) {\n\t\tmagnitude = magnitude || 0.01;\n\t\tthis.angle += magnitude;\n\t}\n\n\tscaleUp(factor) {\n\t\tfactor = factor || 0.1;\n    this.scale += this.scale * factor;\n    this.scale += this.scale * factor;\n\t}\n\n\tscaleDown(factor) {\n\t\tfactor = factor || 0.1;\n    this.scale -= this.scale * factor;\n    this.scale -= this.scale * factor;\n\t}\n\n\tmove(x, y) {\n    if (this.attached) { return }\n\t\tthis.location.setX(this.location.getX() + x * this.scale);\n\t\tthis.location.setY(this.location.getY() + y * this.scale);\n\t}\n\n}\n\nmodule.exports = Viewport;\n","const SpatialInteraction = require(\"./SpatialInteraction\");\nconst Physics = require(\"./Physics\");\nconst Geometry = require(\"./Geometry\");\n\nclass Collision extends SpatialInteraction {\n\n  /**\n   * An <i>Interaction</i> type that represents <b>DDW</b>'s main broad-phase collision detection and resolving mechanism. As a <i>SpatialInteraction</i>, collision checks are only done between a current _Body_ and the ones contained by the nearest neighboar cells of a spatial partitioning grid.\n   * @summary View file: {@link https://github.com/GorillaBus/ddw/blob/master/src/class/Collision.js https://github.com/GorillaBus/ddw/blob/master/src/class/Collision.js}.\n   * @constructor\n   * @param {Physics} settings.Physics - A <i>Physics</i> class object.\n   * @param {Geometry} settings.Geometry - A <i>Geomery</i> class object.\n   */\n  constructor(settings) {\n    super(settings);\n    this.physics = Physics;\n    this.geometry = Geometry;\n    this.intersector = settings.intersector;\n    this.resolver = settings.resolver;\n    this.collision = this.collision.bind(this);\n  }\n\n  /**\n   * Executes the interaction logic.\n\t * @method\n   */\n  run() {\n    this.resolve(this.collision);\n  }\n\n  /**\n   * Verifies the geometrical intersection between two <i>Body</i> objects, based in their bounding circles. In case of a possitive intersection, it will resolve it computing the results of an elastic collision.\n   * @param {Body} BodyA - The Body that initiates the interaction.\n   * @param {Body} BodyB - The Body that intervenes in with BodyA in the interaction.\n   */\n  collision(bodyA, bodyB) {\n    const intersection = this.geometry.circleCircleIntersection(bodyA.world, bodyB.world);\n    if (intersection) {\n      this.physics.elasticCollision(bodyA, bodyB, intersection);\n    }\n  }\n\n}\n\nmodule.exports = Collision;\n","const GlobalInteraction = require(\"./GlobalInteraction\");\nconst Physics = require(\"./Physics\");\n\nclass Gravity extends GlobalInteraction {\n\n  constructor(settings) {\n    super(settings);\n    this.physics = Physics;\n    this.gravitate = this.gravitate.bind(this);\n  }\n\n  run(bodies) {\n    this.resolve(bodies, this.gravitate);\n  }\n\n  gravitate(bodyA, bodyB) {\n    this.physics.gravity(bodyA, bodyB);\n  }\n\n}\n\nmodule.exports = Gravity;\n"],"sourceRoot":""}